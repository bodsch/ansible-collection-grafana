---

grafana_main_version: "{{ grafana_version[0:3] }}"

grafana_install_path: /opt/grafana/{{ grafana_version }}

# should be changed to 'grafana'
grafana_binary: grafana-server

grafana_delegate_to: localhost

grafana_local_tmp_directory: "{{
  lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
  default(lookup('env', 'HOME') ~ '/.cache/ansible/grafana', true) }}/{{ grafana_version }}"

grafana_cache_directory: /var/cache/ansible/grafana

grafana_remote_tmp_directory: "{{ grafana_cache_directory }}/{{ grafana_version }}"

grafana_requirements:
  - iproute2
  - gzip
  - python3-pip
  - python3-virtualenv
  - python3-requests

grafana_python_packages: []
#  - name: grafana-client
##     version: 2.0.3

# ----------------------------------------------------------------------------------------

grafana_pidfile: /run/grafana/grafana-server.pid

grafana_defaults_api:
  # API keys to configure
  keys: []
  # The location where the keys should be stored.
  store_directory: "{{ lookup('env', 'HOME') }}/grafana/api_keys"

grafana_defaults_service_accounts:
  accounts: []
  store_directory: "{{ lookup('env', 'HOME') }}/grafana/service_accounts"

grafana_defaults_config_general:
  app_mode: production
  instance_name: "{{ ansible_hostname }}"
  force_migration: false

grafana_defaults_config_alerting:
  enabled: false
  execute_alerts: false
  error_or_timeout: ""                            # alerting
  nodata_or_nullvalues: ""                        # no_data
  concurrent_render_limit: ""                     # 5
  evaluation_timeout_seconds: ""                  # 30
  notification_timeout_seconds: ""                # 30
  max_attempts: ""                                # 3
  min_interval_seconds: ""                        # 1
  max_annotation_age: ""
  max_annotations_to_keep: ""

grafana_defaults_config_analytics:
  reporting_enabled: false
  reporting_distributor: ""                       # grafana-labs
  check_for_updates: ""                           # true
  check_for_plugin_updates: ""                    # true
  google_analytics_ua_id: ""
  google_tag_manager_id: ""
  rudderstack_write_key: ""
  rudderstack_data_plane_url: ""
  rudderstack_sdk_url: ""
  rudderstack_config_url: ""
  feedback_links_enabled: ""                      # true

grafana_defaults_config_annotations:
  cleanupjob_batchsize: ""                        # 100
  dashboard: {}
  #   max_age: ""
  #   max_annotations_to_keep: ""
  api: {}
  #   max_age: ""
  #   max_annotations_to_keep: ""

grafana_defaults_config_auth:
  login_cookie_name: grafana_session
  login_maximum_inactive_lifetime_duration: ""
  login_maximum_lifetime_duration: ""
  token_rotation_interval_minutes: ""             # 10
  disable_login_form: ""                          # false
  disable_signout_menu: ""                        # false
  signout_redirect_url: ""
  oauth_auto_login: ""                            # false
  oauth_state_cookie_max_age: ""                  # 600
  oauth_skip_org_role_update_sync: ""             # false
  api_key_max_seconds_to_live: ""                 # -1
  sigv4_auth_enabled: ""                          # false
  sigv4_verbose_logging: ""                       # false
  azure_auth_enabled: ""                          # false

  anonymous:
    enabled: false
    org_name: Main Org.
    org_role: Viewer
    hide_version: false

  github:
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_id
    client_secret: ""                             # some_secret
    scopes: []                                    # [user:email, read:org]
    auth_url: https://github.com/login/oauth/authorize
    token_url: https://github.com/login/oauth/access_token
    api_url: https://api.github.com/user
    allowed_domains: ""
    team_ids: ""
    allowed_organizations: ""

  gitlab:
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_id
    client_secret: ""                             # some_secret
    scopes: ""                                    # api
    auth_url: https://gitlab.com/oauth/authorize
    token_url: https://gitlab.com/oauth/token
    api_url: https://gitlab.com/api/v4
    allowed_domains: ""
    allowed_groups: ""

  google:
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_client_id
    client_secret: ""                             # some_client_secret
    scopes: []                                    # [https://www.googleapis.com/auth/userinfo.profile, https://www.googleapis.com/auth/userinfo.email]
    auth_url: https://accounts.google.com/o/oauth2/auth
    token_url: https://accounts.google.com/o/oauth2/token
    api_url: https://www.googleapis.com/oauth2/v1/userinfo
    allowed_domains: ""
    hosted_domain: ""

  grafana_com:
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_id
    client_secret: ""                             # some_secret
    scopes: ""                                    # user:email
    allowed_organizations: ""

  azuread:
    name: Azure AD
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_client_id
    client_secret: ""                             # some_client_secret
    scopes: ""                                    # openid email profile
    auth_url: https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/authorize
    token_url: https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/token
    allowed_domains: ""
    allowed_groups: ""
    role_attribute_strict: false

  okta:
    name: Okta
    enabled: false
    allow_sign_up: true
    client_id: ""                                 # some_id
    client_secret: ""                             # some_secret
    scopes: []                                    # [openid, profile, email, groups]
    auth_url: https://<tenant-id>.okta.com/oauth2/v1/authorize
    token_url: https://<tenant-id>.okta.com/oauth2/v1/token
    api_url: https://<tenant-id>.okta.com/oauth2/v1/userinfo
    allowed_domains: ""
    allowed_groups: ""
    role_attribute_path: ""
    role_attribute_strict: false

  generic_oauth:
    enabled: false
    name: OAuth
    allow_sign_up: true
    client_id: ""                                 # some_id
    client_secret: ""                             # some_secret
    scopes: []                                    # user:email,read:org
    empty_scopes: false
    email_attribute_name: ""                      # email:primary
    email_attribute_path: ""
    login_attribute_path: ""
    name_attribute_path: ""
    id_token_attribute_name: ""
    auth_url: https://foo.bar/login/oauth/authorize
    token_url: https://foo.bar/login/oauth/access_token
    api_url: https://foo.bar/user
    teams_url: ""
    allowed_domains: ""
    team_ids: ""
    allowed_organizations: ""
    role_attribute_path: ""
    role_attribute_strict: false
    groups_attribute_path: ""
    team_ids_attribute_path: ""
    tls_skip_verify_insecure: false
    tls_client_cert: ""
    tls_client_key: ""
    tls_client_ca: ""
    use_pkce: false
    auth_style: ""

  basic:
    enabled: false

  proxy:
    enabled: false
    header_name: ""                               # X-WEBAUTH-USER
    header_property: ""                           # username
    auto_sign_up: true
    sync_ttl: ""                                  # 60
    whitelist: []                                 # [192.168.1.1, 192.168.2.1]
    headers: []                                   # [Email:X-User-Email, Name:X-User-Name]
    headers_encoded: false
    enable_login_token: false

  jwt:
    enabled: false
    header_name: ""                               # X-JWT-Assertion
    email_claim: ""                               # sub
    username_claim: ""                            # sub
    jwk_set_url: ""                               # https://foo.bar/.well-known/jwks.json
    jwk_set_file: ""                              # /path/to/jwks.json
    cache_ttl: ""                                 # 60m
    expected_claims: ""                           # '{"aud": ["foo", "bar"]}'
    key_file: ""                                  # /path/to/key/file
    auto_sign_up: false

  ldap:
    enabled: false
    config_file: /etc/grafana/ldap.toml
    allow_sign_up: true
    # LDAP background sync (Enterprise only)
    # At 1 am every day
    sync_cron: "0 1 * * *"
    active_sync_enabled: true

grafana_defaults_config_aws: {}
#   allowed_auth_providers:
#     - default
#     - keys
#     - credentials
#   assume_role_enabled: true

grafana_defaults_config_azure: {}
#   cloud: "AzureCloud"
#   managed_identity_enabled: false
#   managed_identity_client_id: ""

grafana_defaults_config_dashboards:
  versions_to_keep: ""                            # 20
  min_refresh_interval: ""                        # 5s
  default_home_dashboard_path: ""

grafana_defaults_config_database:
  type: sqlite3                                   # Either "mysql", "postgres" or "sqlite3"
  path: grafana.db                                #
  cache_mode: private                             # For "sqlite3" only. cache mode setting used for connecting to the database. (private, shared)
  host: ""                                        # 127.0.0.1:3306
  name: ""                                        # grafana
  user: ""                                        # root
  password: ""                                    #
  url: ""                                         # e.g. mysql://user:secret@host:port/database
  ssl_mode: disable                               # # For "postgres" only, either "disable", "require" or "verify-full"
  isolation_level: ""                             # For "mysql" use "READ-UNCOMMITTED", "READ-COMMITTED", "REPEATABLE-READ" or "SERIALIZABLE".
  ca_cert_path: ""
  client_key_path: ""
  client_cert_path: ""
  server_cert_name: ""
  max_idle_conn: ""                               # 2
  max_open_conn: ""
  conn_max_lifetime: ""                           # 14400 (means 14400 seconds or 4 hours)
  log_queries: ""
  locking_attempt_timeout_sec: ""                 # 0

grafana_defaults_config_dataproxy:
  enabled: false
  logging: ""                                     # false
  timeout: ""                                     # 30
  dialTimeout: ""                                 # 10
  keep_alive_seconds: ""                          # 30
  tls_handshake_timeout_seconds: ""               # 10
  expect_continue_timeout_seconds: ""             # 1
  max_conns_per_host: ""                          # 0
  max_idle_connections: ""                        # 100
  idle_conn_timeout_seconds: ""                   # 90
  send_user_header: ""                            # false
  response_limit: ""                              # 0
  row_limit: ""                                   # 1000000

grafana_defaults_config_datasources:
  enabled: false
  datasource_limit: ""                            # 5000

grafana_defaults_config_date_formats:
  enabled: true
  full_date: YYYY-MM-DD HH:mm:ss
  interval_second: HH:mm:ss
  interval_minute: HH:mm
  interval_hour: MM/DD HH:mm
  interval_day: MM/DD
  interval_month: YYYY-MM
  interval_year: YYYY
  use_browser_locale: false
  default_timezone: browser

grafana_defaults_config_emails:
  enabled: false
  welcome_email_on_sign_up: false
  templates_pattern:
    - emails/*.html
    - emails/*.txt
  content_types: text/html

grafana_defaults_config_enterprise:
  license_path: ""

grafana_defaults_config_explore:
  enabled: true

grafana_defaults_config_expressions:
  enabled: true

grafana_defaults_config_external_image_storage:
  provider: ""                                    # (s3, webdav, gcs, azure_blob, local)
  s3:
    endpoint: ""
    path_style_access: ""
    bucket: ""
    region: ""
    path: ""
    access_key: ""
    secret_key: ""
  webdav:
    url: ""
    public_url: ""
    username: ""
    password: ""
  gcs:
    key_file: ""
    bucket: ""
    path: ""
  azure_blob:
    account_name: ""
    account_key: ""
    container_name: ""
  local: {}

grafana_defaults_config_feature_toggles: {}
#   there are currently two ways to enable feature toggles in the `grafana.ini`.
#   you can either pass an array of feature you want to enable to the `enable` field or
#   configure each toggle by setting the name of the toggle to true/false. Toggles set to true/false
#   will take presidence over toggles in the `enable` list.
#   enable: feature1,feature2
#   feature1: true
#   feature2: false

grafana_defaults_config_geomap: {}
#   # Set the JSON configuration for the default basemap
#   default_baselayer_config: |
#   {
#     "type": "xyz",
#     "config": {
#       "attribution": "Open street map",
#       "url": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
#     }
#   }
#
#   # Enable or disable loading other base map layers
#   enable_custom_baselayers: true

grafana_defaults_config_grafana_com:
  url: https://grafana.com

grafana_defaults_config_help:
  enabled: true

grafana_defaults_config_live:
  max_connections: ""
  allowed_origins: []
  ha_engine: ""
  ha_engine_address: ""

grafana_defaults_config_log:
  mode:                                           # Either "console", "file", "syslog"
    - console
    - file
  level: info                                     # Either "debug", "info", "warn", "error", "critical", default is "info"
  filters: []                                     # Ex filters: sqlstore:debug
  console:
    level: ""
    format: console                               # valid options are text, console and json
  file:
    level: ""
    format: text                                  # valid options are text, console and json
    log_rotate: ""                                # true
    max_lines: ""                                 # 1000000
    max_size_shift: ""                            # default is 28 means 1 << 28, 256MB
    daily_rotate: ""                              # true
    max_days: ""                                  # 7
  syslog:
    level: ""
    format: text                                  # valid options are text, console and json
    network: ""                                   # This can be udp, tcp, or unix
    address: ""
    facility: ""                                  # user, daemon and local0 through local7 are valid
    tag: ""                                       # default, the process' argv[0] is used.
  frontend:
    enabled: false
    provider: ""                                  # Sentry
    sentry_dsn: ""
    custom_endpoint: ""                           # (/log) Default will log the events to stdout.
    sample_rate: ""                               # Rate of events to be reported between 0 (none) and 1 (all), float (!)
    log_endpoint:
      requests_per_second_limit: ""               # 3
      burst_limit: ""                             # 15
    instrumentations:
      errors_enabled: ""                          # true
      console_enabled: ""                         # false
      webvitals_enabled: ""                       # false
    api_key: ""                                   # Api Key, only applies to Grafana Javascript Agent providertest

grafana_defaults_config_metrics:
  enabled: false
  interval_seconds: ""                            # 10
  disable_total_stats: ""                         # false
  basic_auth:
    username: ""
    password: ""
  environment_info: {}
  #  exampleLabel1: exampleValue1
  #  exampleLabel2: exampleValue2
  graphite:
    address: ""
    prefix: prod.grafana.%(instance_name)s.

grafana_defaults_config_panels:
  disable_sanitize_html: false

grafana_defaults_config_paths:
  data: /var/lib/grafana
  temp_data_lifetime: 24h
  logs: /var/log/grafana
  plugins: /var/lib/grafana/plugins
  provisioning: /etc/grafana/provisioning

grafana_defaults_config_plugin:
  grafana_image_renderer:
    rendering:
      timezone: ""
      language: ""
      viewport_device_scale_factor: ""
      ignore_https_errors: ""
      verbose_logging: ""
      dumpio: ""
      args: []
      chrome_bin: ""
      mode: ""
      clustering:
        mode: ""
        max_concurrency: ""
        timeout: ""
      viewport:
        max_width: ""
        max_height: ""
        max_device_scale_factor: ""
    grpc:
      host: ""                                    # Default host is 127.0.0.1
      port: ""                                    # default port is 0 and will automatically assign a port not in use.

grafana_defaults_config_plugins:
  enable_alpha: false
  app_tls_skip_verify_insecure: false
  allow_loading_unsigned_plugins: []
  plugin_admin_enabled: false
  plugin_admin_external_manage_enabled: false
  plugin_catalog_url: https://grafana.com/grafana/plugins/
  plugin_catalog_hidden_plugins: ""

grafana_defaults_config_profile:
  enabled: false

grafana_defaults_config_query_history:
  enabled: true

grafana_defaults_config_quota:
  enabled: false
  org_user: ""                                    # 10
  org_dashboard: ""                               # 100
  org_data_source: ""                             # 10
  org_api_key: ""                                 # 10
  org_alert_rule: ""                              # 100
  user_org: ""                                    # 10
  global_user: ""                                 # -1
  global_org: ""                                  # -1
  global_dashboard: ""                            # -1
  global_api_key: ""                              # -1
  global_session: ""                              # -1
  global_alert_rule: ""                           # -1

grafana_defaults_config_rbac:
  permission_cache: true

grafana_defaults_config_remote_cache:
  type: database                                  # # Either "redis", "memcached" or "database" default is "database"
  # cache connectionstring options
  # database: will use Grafana primary database.
  # redis:    config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0,ssl=false`.
  #           Only addr is required. ssl may be 'true', 'false', or 'insecure'.
  # memcache: 127.0.0.1:11211
  connstr: ""

grafana_defaults_config_rendering:
  server_url: ""
  callback_url: ""
  concurrent_render_request_limit: ""             # 30

grafana_defaults_config_security:
  disable_initial_admin_creation: false
  admin_user: admin
  admin_password: admin
  secret_key: SW2YcwTIb9zpOOhoPsMm
  encryption_provider: ""                         # secretKey.v1
  available_encryption_providers: []              # (Enterprise only) list of configured key providers, e.g., awskms.v1 azurekv.v1
  disable_gravatar: true                          # false
  data_source_proxy_whitelist: []                 # data source proxy whitelist (ip_or_domain:port separated by spaces)
  disable_brute_force_login_protection: ""        # false
  cookie_secure: ""                               # set to true if you host Grafana behind HTTPS. default is false.
  cookie_samesite: ""                             # defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
  allow_embedding: ""                             # false
  strict_transport_security: ""                   # false
  strict_transport_security_max_age_seconds: ""   # 86400
  strict_transport_security_preload: ""           # false
  strict_transport_security_subdomains: ""        # false
  x_content_type_options: ""                      # true
  x_xss_protection: ""                            # true
  content_security_policy: ""                     # false
  content_security_policy_template:
    script-src:
      - self
      - unsafe-eval
      - unsafe-inline
      - strict-dynamic
      - "$NONCE"
    object-src:
      - none
    font-src:
      - self
    style-src:
      - self
      - unsafe-inline
      - "blob:"
    img-src:
      - "*"
      - "data:"
    base-uri:
      - self
    connect-src:
      - self
      - grafana.com
      - ws://$ROOT_PATH
      - wss://$ROOT_PATH
    manifest-src:
      - self
    media-src:
      - none
    form-action:
      - self
  angular_support_enabled: ""                     # true - This will be disabled by default in future release
  csrf_trusted_origins: []
  csrf_additional_headers: []
  encryption:
    data_keys_cache_ttl: ""                       # 15m
    data_keys_cache_cleanup_interval: ""          # 1m

grafana_defaults_config_server:
  protocol: http                                  # (http, https, h2, socket)
  http_addr: ""
  http_port: 3000
  domain: localhost
  enforce_domain: false
  root_url: "%(protocol)s://%(domain)s:%(http_port)s/"
  serve_from_sub_path: ""                         # false
  router_logging: ""                              # false
  static_root_path: public
  enable_gzip: false
  cert_file: ""
  cert_key: ""
  socket: ""
  cdn_url: ""
  read_timeout: ""                                # 0

grafana_defaults_config_smtp:
  enabled: false
  host: localhost:25
  user: ""
  # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
  password: ""
  cert_file: ""
  key_file: ""
  skip_verify: false
  from_address: admin@grafana.localhost
  from_name: Grafana
  # EHLO identity in SMTP dialog (defaults to instance_name)
  ehlo_identity: dashboard.example.com
  # SMTP startTLS policy (defaults to 'OpportunisticStartTLS')
  startTLS_policy: NoStartTLS

grafana_defaults_config_snapshots:
  # snapshot sharing options
  external_enabled: true
  external_snapshot_url: https://snapshots.raintank.io
  external_snapshot_name: Publish to snapshots.raintank.io
  # Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
  # creating and deleting snapshots.
  public_mode: false
  # remove expired snapshot
  snapshot_remove_expired: true

grafana_defaults_config_tracing:
  # jaeger: {}
  #   # Enable by setting the address sending traces to jaeger (ex localhost:6831)
  #   address: localhost:6831
  #   # Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
  #   always_included_tag: tag1:value1
  #   # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
  #   sampler_type: const
  #   # jaeger samplerconfig param
  #   # for "const" sampler, 0 or 1 for always false/true respectively
  #   # for "probabilistic" sampler, a probability between 0 and 1
  #   # for "rateLimiting" sampler, the number of spans per second
  #   # for "remote" sampler, param is the same as for "probabilistic"
  #   # and indicates the initial sampling rate before the actual one
  #   # is received from the mothership
  #   sampler_param: 1
  #   # sampling_server_url is the URL of a sampling manager providing a sampling strategy.
  #   sampling_server_url: ""
  #   # Whether or not to use Zipkin propagation (x-b3- HTTP headers).
  #   zipkin_propagation: false
  #   # Setting this to true disables shared RPC spans.
  #   # Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
  #   disable_shared_zipkin_spans: false

  opentelemetry:
    jaeger: {}
    #   # jaeger destination (ex http://localhost:14268/api/traces)
    #   address: http://localhost:14268/api/traces
    #   # Propagation specifies the text map propagation format: w3c, jaeger
    #   propagation: jaeger

    # This is a configuration for OTLP exporter with GRPC protocol
    otlp: {}
    #   # otlp destination (ex localhost:4317)
    #   address: localhost:4317
    #   # Propagation specifies the text map propagation format: w3c, jaeger
    #   propagation: w3c

grafana_defaults_config_unified_alerting:
  # Enable the Unified Alerting sub-system and interface.
  # When enabled we'll migrate all of your alert rules and notification channels to the new system.
  # New alert rules will be created and your notification channels will be converted into an Alertmanager configuration.
  # Previous data is preserved to enable backwards compatibility but new data is removed.```
  enabled: false
  # Comma-separated list of organization IDs for which to disable unified alerting. Only supported if unified alerting is enabled.
  disabled_orgs: ""
  # Specify the frequency of polling for admin config changes.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  admin_config_poll_interval: 60s
  # Specify the frequency of polling for Alertmanager config changes.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  alertmanager_config_poll_interval: 60s
  # Listen address/hostname and port to receive unified alerting messages for other Grafana instances.
  # The port is used for both TCP and UDP.
  # It is assumed other Grafana instances are also running on the same port.
  # The default value is `0.0.0.0:9094`.
  ha_listen_address: "0.0.0.0:9094"
  # Listen address/hostname and port to receive unified alerting messages for other Grafana instances.
  # The port is used for both TCP and UDP.
  # It is assumed other Grafana instances are also running on the same port.
  # The default value is `0.0.0.0:9094`.
  ha_advertise_address: ""
  # Comma-separated list of initial instances (in a format of host:port) that will form the HA cluster.
  # Configuring this setting will enable High Availability mode for alerting.
  ha_peers: ""
  # Time to wait for an instance to send a notification via the Alertmanager. In HA, each Grafana instance will
  # be assigned a position (e.g. 0, 1). We then multiply this position with the timeout to indicate how long should
  # each instance wait before sending the notification to take into account replication lag.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  ha_peer_timeout: "15s"
  # The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated
  # across cluster more quickly at the expense of increased bandwidth usage.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  ha_gossip_interval: "200ms"
  # The interval between gossip full state syncs. Setting this interval lower (more frequent) will increase convergence speeds
  # across larger clusters at the expense of increased bandwidth usage.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  ha_push_pull_interval: "60s"
  # Enable or disable alerting rule execution. The alerting UI remains visible. This option has a legacy version in the `[alerting]` section that takes precedence.
  execute_alerts: true
  # Alert evaluation timeout when fetching data from the datasource. This option has a legacy version in the `[alerting]` section that takes precedence.
  # The timeout string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  evaluation_timeout: 30s
  # Number of times we'll attempt to evaluate an alert rule before giving up on that evaluation.
  # This option has a legacy version in the `[alerting]` section that takes precedence.
  max_attempts: 3
  # Minimum interval to enforce between rule evaluations.
  # Rules will be adjusted if they are less than this value  or if they are not multiple of the scheduler interval (10s).
  # Higher values can help with resource management as we'll schedule fewer evaluations over time.
  # This option has a legacy version in the `[alerting]` section that takes precedence.
  # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
  min_interval: 10s
  reserved_labels:
    # Comma-separated list of reserved labels added by the Grafana Alerting engine that should be disabled.
    # For example: `disabled_labels=grafana_folder`
    disabled_labels: ""

grafana_defaults_config_users:
  # disable user signup / registration
  allow_sign_up: true

  # Allow non admin users to create organizations
  allow_org_create: true

  # Set to true to automatically assign new users to the default organization (id 1)
  auto_assign_org: true

  # Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
  auto_assign_org_id: 1

  # Default role new users will be automatically assigned (if disabled above is set to true)
  auto_assign_org_role: Viewer

  # Require email validation before sign up completes
  verify_email_enabled: false

  # Background text for the user field on the login page
  login_hint: email or username
  password_hint: password

  # Default UI theme ("dark" or "light")
  default_theme: dark

  # Default locale (supported IETF language tag, such as en-US)
  default_locale: en-US

  # Path to a custom home page. Users are only redirected to this if the default home dashboard is used.
  # It should match a frontend route and contain a leading slash.
  home_page: ""

  # External user management, these options affect the organization users view
  external_manage_link_url: ""
  external_manage_link_name: ""
  external_manage_info: ""

  # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
  viewers_can_edit: false

  # Editors can administrate dashboard, folders and teams they create
  editors_can_admin: false

  # The duration in time a user invitation remains valid before expiring.
  # This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 24h (24 hours).
  # The minimum supported duration is 15m (15 minutes).
  user_invite_max_lifetime_duration: 24h

  # Enter a comma-separated list of users login to hide them in the Grafana UI. These users are shown to Grafana admins and themselves.
  # hidden_users: ""

grafana_defaults_config_ldap:
  servers: []
  #   - hosts:
  #       - 127.0.0.1
  #     port: 389
  #     use_ssl: false
  #     start_tls: false
  #     ssl_skip_verify: false
  #     # root_ca_cert = "/path/to/certificate.crt"
  #     # client_cert = "/path/to/client.crt"
  #     # client_key = "/path/to/client.key"
  #     bind_dn: 'cn=admin,dc=grafana,dc=org'
  #     bind_password: grafana
  #     timeout: 10
  #     search_filter: (cn=%s)
  #     search_base_dns:
  #       - 'dc=grafana,dc=org'
  #     # group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
  #     # group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
  #     # group_search_filter_user_attribute = "uid"
  #     attributes:
  #       name: givenName
  #       surname: sn
  #       username: cn
  #       member_of: memberOf
  #       email: email
  #     group_mappings:
  #       - group_dn: 'cn=admins,ou=groups,dc=grafana,dc=org'
  #         org_role: Admin
  #       - group_dn: 'cn=users,ou=groups,dc=grafana,dc=org'
  #         org_role: Editor
  #       - group_dn: '*'
  #         org_role: Viewer

# ----------------------------------------------------------------------------------------

grafana_upgrade: false
grafana_must_be_install_or_activate: false

grafana_defaults_directory: /etc/default

grafana_defaults_release:
  github_url: https://github.com/grafana/grafana/releases
  download_url: https://dl.grafana.com/{{ grafana_edition }}/release
  api_url: https://api.github.com/repos/grafana/grafana/releases
  file: "grafana{{ '-enterprise' if grafana_edition == 'enterprise' else '' }}-{{ grafana_version }}.{{ ansible_facts.system | lower }}-{{ system_architecture }}.tar.gz"
  binary: grafana

go_arch_map:
  x86_64: 'amd64'
  aarch64: 'arm64'
  armv7l: 'armv7'
  armv6l: 'armv6'

system_architecture: "{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}"

systemd_lib_directory: /lib/systemd/system

...
