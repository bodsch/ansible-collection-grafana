#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}
# To troubleshoot and get more log info enable ldap debug logging in grafana.ini
# [log]
# filters = ldap:debug

{% if grafana_config_ldap is defined and
      grafana_config_ldap.servers is defined and
      grafana_config_ldap.servers | count > 0 %}
  {% for ldap in grafana_config_ldap.servers %}
[[servers]]
    {% if ldap.hosts is defined and
          ldap.hosts | count > 0 %}
host = "{{ ldap.hosts | join('" "') }}"
    {% endif %}
    {% if ldap.port is defined and
          ldap.port | string | length > 0 %}
port = {{ ldap.port }}
    {% endif %}
    {% if ldap.use_ssl is defined %}
use_ssl = {{ ldap.use_ssl | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if ldap.start_tls is defined %}
start_tls = {{ ldap.start_tls | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if ldap.ssl_skip_verify is defined %}
ssl_skip_verify = {{ ldap.ssl_skip_verify | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if ldap.use_ssl is defined or ldap.start_tls is defined %}
      {% if ldap.root_ca_cert is defined and
          ldap.root_ca_cert | string | length > 0 %}
root_ca_cert = "{{ ldap.root_ca_cert }}"
      {% endif %}
      {% if ldap.client_cert is defined and
          ldap.client_cert | string | length > 0 %}
client_cert = "{{ ldap.client_cert }}"
      {% endif %}
      {% if ldap.client_key is defined and
          ldap.client_key | string | length > 0 %}
client_key = "{{ ldap.client_key }}"
      {% endif %}
    {% endif %}
    {% if ldap.bind_dn is defined and
          ldap.bind_dn | string | length > 0 %}
bind_dn = "{{ ldap.bind_dn }}"
    {% endif %}
    {% if ldap.bind_password is defined and
          ldap.bind_password | string | length > 0 %}
bind_password = "{{ ldap.bind_password }}"
    {% endif %}
    {% if ldap.timeout is defined and
          ldap.timeout | string | length > 0 %}
timeout = {{ ldap.timeout }}
    {% endif %}
    {% if ldap.search_filter is defined and
          ldap.search_filter | string | length > 0 %}
search_filter = "{{ ldap.search_filter }}"
    {% endif %}
    {% if ldap.search_base_dns is defined and
          ldap.search_base_dns | count > 0 %}
search_base_dns = {{ ldap.search_base_dns }}
    {% endif %}
    {% if ldap.group_search_filter is defined and
          ldap.group_search_filter | string | length > 0 %}
group_search_filter = "{{ ldap.group_search_filter }}"
    {% endif %}
    {% if ldap.group_search_base_dns is defined and
          ldap.group_search_base_dns | string | length > 0 %}
group_search_base_dns = {{ ldap.group_search_base_dns }}
    {% endif %}
    {% if ldap.group_search_filter_user_attribute is defined and
          ldap.group_search_filter_user_attribute | string | length > 0 %}
group_search_filter_user_attribute = "{{ ldap.group_search_filter_user_attribute }}"
    {% endif %}
    {% if ldap.attributes is defined and
          ldap.attributes | count > 0 %}

[servers.attributes]
      {% if ldap.attributes.name is defined and
            ldap.attributes.name | string | length > 0 %}
name = "{{ ldap.attributes.name }}"
      {% endif %}
      {% if ldap.attributes.surname is defined and
            ldap.attributes.surname | string | length > 0 %}
surname = "{{ ldap.attributes.surname }}"
      {% endif %}
      {% if ldap.attributes.username is defined and
            ldap.attributes.username | string | length > 0 %}
username = "{{ ldap.attributes.username }}"
      {% endif %}
      {% if ldap.attributes.member_of is defined and
            ldap.attributes.member_of | string | length > 0 %}
member_of = "{{ ldap.attributes.member_of }}"
      {% endif %}
      {% if ldap.attributes.email is defined and
            ldap.attributes.email | string | length > 0 %}
email = "{{ ldap.attributes.email }}"
      {% endif %}
    {% endif %}
    {% if ldap.group_mappings is defined and
          ldap.group_mappings | count > 0 %}
      {% for mapping in ldap.group_mappings %}

[[servers.group_mappings]]
        {% if mapping.group_dn is defined and
              mapping.group_dn | string | length > 0 %}
group_dn = "{{ mapping.group_dn }}"
        {% endif %}
        {% if mapping.org_role is defined and
              mapping.org_role | string | length > 0 %}
org_role = "{{ mapping.org_role }}"
        {% endif %}
        {% if mapping.org_id is defined and
              mapping.org_id | string | length > 0 %}
org_id = {{ mapping.org_id }}
        {% endif %}
      {% endfor %}

    {% endif %}
  {% endfor %}
{% endif %}
{#
[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "127.0.0.1"
# Default port is 389 or 636 if use_ssl = true
port = 389
# Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS)
use_ssl = false
# If set to true, use LDAP with STARTTLS instead of LDAPS
start_tls = false
# set to true if you want to skip ssl cert validation
ssl_skip_verify = false
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = "/path/to/certificate.crt"
# Authentication against LDAP servers requiring client certificates
# client_cert = "/path/to/client.crt"
# client_key = "/path/to/client.key"

# Search user bind dn
bind_dn = "cn=admin,dc=grafana,dc=org"
# Search user bind password
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
bind_password = 'grafana'

# Timeout in seconds (applies to each host specified in the 'host' entry (space separated))
timeout = 10

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "(cn=%s)"

# An array of base dns to search through
search_base_dns = ["dc=grafana,dc=org"]

## For Posix or LDAP setups that does not support member_of attribute you can define the below settings
## Please check grafana LDAP docs for examples
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
# group_search_filter_user_attribute = "uid"

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "givenName"
surname = "sn"
username = "cn"
member_of = "memberOf"
email =  "email"

# Map ldap groups to grafana org roles
[[servers.group_mappings]]
group_dn = "cn=admins,ou=groups,dc=grafana,dc=org"
org_role = "Admin"
# To make user an instance admin  (Grafana Admin) uncomment line below
# grafana_admin = true
# The Grafana organization database id, optional, if left out the default org (id 1) will be used
# org_id = 1

[[servers.group_mappings]]
group_dn = "cn=users,ou=groups,dc=grafana,dc=org"
org_role = "Editor"

[[servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
group_dn = "*"
org_role = "Viewer"
#}
